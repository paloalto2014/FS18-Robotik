/*
BALL IM SLOT X

Was das Programm macht:
- ständig prüfen, ob StartSpiel(true)
- nimmt die Sensoren aus der Liste und kalibriert sie, speichert Werte in Array
- setzt Ergebnis-Array auf {0, 0, 0, 0}
- falls noch kein Ball gefunden, loopt ständig durch die Sensoren um eine Lichtdifferenz zu erkennen
- bei Lichtdifferenz wird der Ball erkannt, Schleife wird abgebrochen
- Ergebnis des Ereignisses wird in Array geschrieben, z.B. {0, 0, 1, 0} bedeutet, dass der 3. Sensor einen Ball gesehen hat
- spiel_starten = false zum beenden des Spiels

Input:
- DONE für Spielbeginn --> spiel_starten = true  // sollte von Anton kommen
Output:
- DONE Array mit letzem Event --> spiel_ergebnis_array = {0, 0, 1, 0} // benötigt Anton
- OPEN Mitteilung über Spielbeginn an Anton
- OPEN Mitteilung über Timeout an Anton
- OPEN Mitteilung über Spielende an Anton

Backlog:
- OPEN Bluetoothkommunikation als Slave Oscar mit Master Anton
- OPEN Timeout
- DONE Melodie zum Starten
- DONE Melodie bei erkanntem Ball
- OPEN Ansteuerung der Hindernismotoren
*/ 

//////////////// WERTE ZUM EINTRAGEN //////////////////////////
const int licht_differenz = 5; //ab dieser Differenz soll ein Ball detektiert werden
const int licht_sensoren_array[] = {S1, S2, S3, S4}; //hier die angeschlossenen Sensoren eintragen
const int licht_sensoren_anzahl = 4; //hier Anzahl der Lichtsensoren eintragen
bool debug_modus = true; // um alle Debug-Bestandteile auszuschalten

////////////////INITIALISIERUNG DER ARRAYS + BOOLEAN/////////////////////
bool spiel_starten = false; // wird in Zukunft durch Anton geaendert? 
bool ball_gefunden = false;
int licht_initial_array[licht_sensoren_anzahl] = {};
int spiel_ergebnis_array[licht_sensoren_anzahl] = {}; // Array fuer Anton 0,1,0,0 heisst, dass bei 4 Sensoren der 2. einen Ball gesehen hat

//#include NXCDefs.h
#define BT_CONN 0  // Slave 0!!!
#define OUTBOX 2
#define INBOX 1
bool beginn_zu_spielen = false;


sub BTCheck(int conn) {
    if (!BluetoothStatus(conn)==NO_ERR) {
       ClearScreen();
       TextOut(0, LCD_LINE3, "FEHLER: Bluetooth");
       NumOut(0, LCD_LINE3, conn);
       Wait(5000);
       StopAllTasks();
    } else {
      ClearScreen();
      TextOut(0, LCD_LINE2, "OK: Bluetooth");
      NumOut(0, LCD_LINE3, conn);
      Wait(1000);
    }
    
}
///////////////// Hilfsfunktionen ////////////////////////////////////
sub debug(int anzahl_piep, int ton_hoehe, int dauer) {
    for (int i=0; i<anzahl_piep; i++) {
        PlayTone(ton_hoehe, dauer);
        Wait(1000);
    }
    Wait(2000);
}

sub print_array(int array[], int line) {
    
    int position_x = 10;
    for (int j=0; j<ArrayLen(array); j++) {    
        NumOut(position_x, line, array[j]);
        position_x = position_x + 15;
    } 

}

/////////////// TASK SOUND ///////////////////////////////////////////////////
task sound() {

     if(spiel_starten == true) {
         PlayTone(523,400);
         Wait(100);
         Wait(300);
         PlayTone(523,400);
         Wait(100);
         PlayTone(659,400);
         Wait(100);
         PlayTone(784,400);
         Wait(100);
         PlayTone(659,400);
         Wait(100);
         PlayTone(784,400);
         Wait(500);
         
         while (spiel_starten == true){
            PlayTone(415,400);
            Wait(100);
            PlayTone(415,400);
            Wait(100);
            PlayTone(370,400);
            Wait(100);
            PlayTone(370,400);
            Wait(100);
            PlayTone(349,400);
            Wait(100);
            PlayTone(349,400);
            Wait(100);
            PlayTone(330,400);
            Wait(100);
            PlayTone(330,400);
             Wait(100);
         }  
     }
     PlayTone(262,400);
     Wait(100);
     PlayTone(294,400);
     Wait(100);
     PlayTone(330,400);
     Wait(100);
     PlayTone(349,400);
     Wait(100);
     PlayTone(392,400);
     Wait(100);
     PlayTone(440,400);
     Wait(100);
     PlayTone(494,400);
     Wait(100);
     PlayTone(523,400);
     Wait(100);         

} // end of sound

///////////////// FUNKTIONEN ////////////////////////////////////
int licht_kalibrierung(int lichtsensor){
    int licht_initial = Sensor(lichtsensor); // Speicherung des Lichtwertes ohne Ball
    return licht_initial; //gibt den Wert zurueck
}

sub ball_ist_da(int index) {
    
    ball_gefunden = true;
    spiel_ergebnis_array[index] = 1;
    
    // zum versenden
    int ergebnis_slot;
    ergebnis_slot = index + 1;
    SendRemoteNumber(BT_CONN, OUTBOX, ergebnis_slot);
    
    // debugging beginn
    if (debug_modus == true) {
       //PlayTone(1000, 1000);   
       ClearScreen();
       TextOut(10, LCD_LINE1, "Ball in Slot:");
       NumOut(10, LCD_LINE2, index+1);
       TextOut(10, LCD_LINE3, "Ergebnisarry:");
       print_array(spiel_ergebnis_array, LCD_LINE4);
    } // debugging ende

}

int ball_kommt(int index, int lichtsensor) {
    const int licht_initial = licht_initial_array[lichtsensor];
    const int licht_aktuell = Sensor(lichtsensor);
    if ((licht_initial - licht_aktuell) > licht_differenz) {
       ball_ist_da(index);
       
    }
    else if ((licht_initial - licht_aktuell) < -licht_differenz) {
       ball_ist_da(index);
       
    }
}


 ////////////////////task main()/////////////////////////////////


task main() {

 
     
     BTCheck(BT_CONN);
 
   while(true) {
   
   //debugging
   ClearScreen();
   TextOut(0, LCD_LINE4, "In Warteschlaufe...");
   
   ReceiveRemoteBool(INBOX, true, beginn_zu_spielen);
   
   if(beginn_zu_spielen == true) {
      spiel_starten = true;
   }
  
   
   
       if (spiel_starten) {
          start sound;
          // Initialisiert Sensoren und speichert Lichtkalibrierung, Spielstand auf null
         for (int i=0; i<ArrayLen(licht_sensoren_array); i++) {
             int aktueller_sensor = licht_sensoren_array[i]; 
             SetSensor(aktueller_sensor, SENSOR_LIGHT);
             licht_initial_array[i] = licht_kalibrierung(aktueller_sensor);
             spiel_ergebnis_array[i] = 0;
         }
         
         // debugging beginn
         if (debug_modus == true) {
            ClearScreen();
            TextOut(0, LCD_LINE3, "Lichtkalibierung:");
            print_array(licht_initial_array, LCD_LINE4);
         } // debugging ende
         
         while (ball_gefunden == false) { 
               for (int i=0; i<ArrayLen(licht_sensoren_array); i++) {
                              ball_kommt(i, licht_sensoren_array[i]);
                          }   
         }
       
       spiel_starten = false;
       ball_gefunden = false;
      
         /*  // debugging fuer unten
          if (debug_modus == true) {
             TextOut(0, LCD_LINE6, "Mittelknopf fuer");
             TextOut(0, LCD_LINE7, "weitere Runde");
             TextOut(0, LCD_LINE8, "druecken...");
          }// debugging ende */

       
       } // end of if
       
       /* // debugging beginn - weitere spielrunde
       if (debug_modus == true) {
          until(ButtonPressed(BTNCENTER,false));
          until(!ButtonPressed(BTNCENTER,false));
          spiel_starten = true;
       } // debugging ende */

       
   } // end of while
   
 debug(3, 100, 200); // Dieser Ton waere ein Fehler!

} 

/* task main() {
     Precedes(ball, sound); 
     }
 */

