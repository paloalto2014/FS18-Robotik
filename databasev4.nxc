/*Mastercode um den Kassenzettel zu lesen und das Spiel zu starten.
Written by: Steve Zwicky, Marcel Graf und Eliah Knecht */

#define BT_CONN 1  // Master 1!!! Bluetooth von Master verwenden zum verbinden
#define OUTBOX 1
#define INBOX 2

int bon[]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //datenbank von allen Kunden 0= noch nicht gespiel, 1= verloren, 2=gewinn 1, 2 =gewinn 2
int grenzwert = 45;
short user; // welcher kassenzettel


int CheckBinary()//überprüft den 2. Sensor
{
  if (Sensor(S2)<grenzwert)//Sensor ist Schwarz
  {
    return 1;
  }
  return 0; //Weiss
}

sub BTCheck(int conn) {
    if (!BluetoothStatus(conn)==NO_ERR) {
       ClearScreen();
       TextOut(0, LCD_LINE3, "FEHLER: Bluetooth");
       NumOut(0, LCD_LINE4, conn);
       Wait(5000);
       StopAllTasks();
    } else {
      ClearScreen();
      TextOut(0, LCD_LINE2, "OK: Bluetooth");
      Wait(1000);
    }
    
}

int Send_to_Oscar()
{
      bool beginn_zu_spielen = true;
      SendRemoteBool(BT_CONN, OUTBOX, beginn_zu_spielen);
      NumOut(0, LCD_LINE5, beginn_zu_spielen);
      //Wait(1000);
      
      int  ergebnis_eingang;
      
      
      while(beginn_zu_spielen) {
     
         ReceiveRemoteNumber(INBOX, true, ergebnis_eingang);
        
         /* ergebnis_eingang =2;//solange kein remote stattfindet
         ClearScreen();
         TextOut(10, LCD_LINE3, "Slot:");
         NumOut(13, LCD_LINE5, ergebnis_eingang);
         */

      if (ergebnis_eingang > 0) {
        Wait(2000);
        beginn_zu_spielen = false;
        }
     
     }
     
     
     
      return ergebnis_eingang;
}



sub OpenGate()  //öffnet das Tor um den Ball rauszulassen
{
  SetSensor(S4, SENSOR_TOUCH);
  OnFwd(OUT_B, 100);
  Wait(500);
  Off(OUT_B);
  Wait(2000);
  OnRev(OUT_B,100);
  until(Sensor(S4)==1);
  Off(OUT_B);
  
}

sub Print_already_played()
{
  TextOut(0, LCD_LINE1, "Ihr Kassenzettel " ,true);
  TextOut(0, LCD_LINE2, "wurde schon benutzt" );
  Wait(3000);
}

sub Print_already_won1()
{
  TextOut(0, LCD_LINE1, "Ihr Kassenzettel " ,true);
  TextOut(0, LCD_LINE2, "wurde schon benutzt" );
  TextOut(0, LCD_LINE3, "Sie haben 20% Rabatt" );
  TextOut(0, LCD_LINE4, "auf Ihren nächsten Einkauf" );
  Wait(3000);
  
}

sub Print_already_won2()
{
  TextOut(0, LCD_LINE1, "Ihr Kassenzettel " ,true);
  TextOut(0, LCD_LINE2, "wurde schon benutzt" );
  TextOut(0, LCD_LINE3, "Sie haben 30% Rabatt" );
  TextOut(0, LCD_LINE4, "auf Ihren nächsten Einkauf" );
  Wait(3000);
}

sub Print_error()
{
  TextOut(0, LCD_LINE1, "Error " ,true);
  Wait(2000);
}



short CheckCard()//startet den Einzug der Karte und gibt den Wert der Karte zurück
{
  OnFwd(OUT_A, 100);
  int binary[]= {0,0,0,0};
  int count=0;
  bool before_white = true;//startet mit Weiss
  while(Sensor(S3)==0){   //liest so lange den Wert der Karte bis S3 gedrückt wird
     if (Sensor(S1)<grenzwert){ //Sensor 1 liest Schwarz
       if (before_white==true) {       
          binary[count]= CheckBinary(); //liesst den Wert des 2. Sensors
          count = count +1;
          before_white= false;
          }
      }
      if (Sensor(S1)>=grenzwert){ //Sensor 1 liesst Weiss
         if (before_white == false) {
          before_white= true;
          }
         }

  }
  OnRev(OUT_A, 100); //gibt die Karte zurück
  Wait(500);
  Off(OUT_A);
    
  short binary_in_dezimal = binary[0]*1+binary[1]*2+binary[2]*4+binary[3]*8 ; //rechnet den Binärcode in eine Dezimalzahl um
  if (count<4)// wenn eine Karte mit falschem Format eingelesen wird, wird -1 zurückgegeben
  {
     binary_in_dezimal = -1;
  }
  
  NumOut(0,  LCD_LINE1, binary[0],true);
  NumOut(0,  LCD_LINE2, binary[1]);
  NumOut(0,  LCD_LINE3, binary[2]);
  NumOut(0,  LCD_LINE4, binary[3]);
  NumOut(0,  LCD_LINE5, binary_in_dezimal);
  NumOut(0,  LCD_LINE6, count);
  return binary_in_dezimal;
}



sub Print_for_first_round(int endgame, int anotherone)
{
  TextOut(0, LCD_LINE1, "Für einen 20% Gutschein" ,true);
  NumOut(0,  LCD_LINE2, endgame);
  TextOut(0, LCD_LINE3, "Für einen 2. Versuch");
  NumOut(0,  LCD_LINE4, anotherone);
  Wait(2000);
}

sub Print_for_second_round(int endgame, int checkpot)
{
  TextOut(0, LCD_LINE1, "Für einen 20% Gutschein" ,true);
  NumOut(0,  LCD_LINE2, endgame);
  TextOut(0, LCD_LINE3, "Für den Checkpot");
  NumOut(0,  LCD_LINE4, checkpot);
  Wait(2000);
}




int Play_again()//startet die 2. Runde des Spiel
{
  int endgame = Random(3) + 1;    //Slot der getroffen werden muss um den einfachen Gewinn zu gewinnen
  int checkpot = Random(3) + 1;   // Slot für den Checkpot
  while (endgame==checkpot) //beide gleich
  {
    checkpot =  Random(3) + 1;
  }
  Print_for_second_round(endgame,checkpot);//Zeigt welche Slots man treffen muss um zu gewinnen
  short played = Send_to_Oscar();
   if (played==endgame)//Einfacher Gewinn
   {
     TextOut(0, LCD_LINE1, "Sie haben 20% Rabatt" ,true);
     TextOut(0, LCD_LINE2, "auf den nächsten");
     TextOut(0, LCD_LINE3, "Einkauf gewonnen");
     Wait(2000);
     return 2;
   }
   if (played==checkpot)//Checkpot
   {
     TextOut(0, LCD_LINE1, "Sie haben 30% Rabatt" ,true);
     TextOut(0, LCD_LINE2, "auf den nächsten");
     TextOut(0, LCD_LINE3, "Einkauf gewonnen");
     Wait(2000);
     return 3;
   }
  TextOut(0, LCD_LINE1, "Sie haben leider" ,true);
  TextOut(0, LCD_LINE2, "nichts Gewonnen");
  Wait(2000);
  return 1;//nicht gewonnen
}


int Startgame() //startet das Spiel und gibt den Wert zurück was gerspielt wurde
{
  int win = 0;
  int endgame = Random(3) + 1;  //Slot der getroffen werden muss um den einfachen Gewinn zu gewinnen
  int anotherone = Random(3) + 1;   //Slot der getroffen werden muss um nochmals zu spielen
  while (endgame==anotherone) //beide gleich
  {
    anotherone =  Random(3) + 1;
  }
  Print_for_first_round(endgame,anotherone);//Zeigt welche Slots man treffen muss um zu gewinnen
  int played = Send_to_Oscar();
  if (played==endgame)//Einfacher Gewinn
    {
    TextOut(0, LCD_LINE1, "Sie haben 20% Rabatt" ,true);
    TextOut(0, LCD_LINE2, "auf den nächsten");
    TextOut(0, LCD_LINE3, "Einkauf gewonnen");
    Wait(2000);
    return 2;
    }
  if (played==anotherone) //2. Runde wird gespielt
    {
     return Play_again();
     
     }
  TextOut(0, LCD_LINE1, "Sie haben leider" ,true);
  TextOut(0, LCD_LINE2, "nichts Gewonnen");
  Wait(2000);
  return 1;//nicht gewonnen
}



task main()
{
   SetSensor(S1, SENSOR_LIGHT);
   SetSensor(S2, SENSOR_LIGHT);
   SetSensor(S3, SENSOR_TOUCH);
   Wait(1000);
   while (true)
   {
     TextOut(0, LCD_LINE1, "Bitte Kassenzettel einführen" ,true);
     if (Sensor(S1)>grenzwert)
     {
        user=CheckCard();
        if (user == -1) //ungültige Karte
        {
           TextOut(0, LCD_LINE1, "Falsche Karte" ,true);
           Wait(2000);
           continue;
        }
        
        if (user <-1 || user > ArrayLen(bon))  //Falsche Einlese
        {
            TextOut(0, LCD_LINE1, "Fehler" ,true);
            Wait(2000);
            continue;
        }
        
        
        NumOut(0, LCD_LINE1,bon[user] ,true);
        switch (bon[user])
        {
          case 0 :  //noch nicht Gespielt
           // OpenGate();//Gibt den Ball aus
             TextOut(0, LCD_LINE1, "spiel Startet" ,true);
            bon[user] = Startgame();
            break;
          case 1: //Spieler hat schon gespielt
            Print_already_played();
            break;
          case 2:   //Spieler hat schon Gewonnen
            Print_already_won1();
            break;
          case 3:   //Spieler hat schon Gewonnen
            Print_already_won2();
            break;
          default :
            Print_error();
            continue;
            }   

      TextOut(0, LCD_LINE1, "Durchgang beendet" ,true);
      NumOut(0, LCD_LINE2, bon[user]);
      Wait(2000);
     }

   }

}


